{"title":"爱了爱了async/await","date":"2020-05-18T22:39:57.000Z","date_formatted":{"ll":"May 19, 2020","L":"05/19/2020","MM-DD":"05-19"},"link":"/1589841597","comments":true,"tags":["JavaScript"],"categories":["Learning"],"updated":"2021-02-27T09:47:55.295Z","content":"<h2 id=\"日常啰嗦\">日常啰嗦<a title=\"#日常啰嗦\" href=\"#日常啰嗦\"></a></h2>\n<p>这是昨天的一道面试题：promise和async/await的区别是什么？<br>\n当时我没答上来，贼尴尬，我一般只使用的promise，async只是有看到过，但从来没用过。下来我就好好研究了一下async/await，它太好了，解决了promise的好几个毛病，真的是让我爱上了它。</p>\n<h2 id=\"async/await的使用方法\">async/await的使用方法<a title=\"#async/await的使用方法\" href=\"#async/await的使用方法\"></a></h2>\n<p>假定现在有一个异步请求：getJSON();</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">getJSON</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolved, rejected</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        $.ajax(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">            url: <span class=\"string\">&quot;xxxxxxxx&quot;</span>,</span><br><span class=\"line\">            success: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\tresolved(data)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            error: <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                rejected(res)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>按照以往promise的写法，接下来应该使用then进行处理异步了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON.then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理成功结果</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//处理错误</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用async/await，是这样写的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"keyword\">async</span> () =&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data =  <span class=\"keyword\">await</span> getJSON();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;  <span class=\"comment\">//return await getJSON;</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//处理错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeRequest();</span><br></pre></td></tr></table></figure>\n<p>语法上，await只能用在async定义的函数里，async会隐式地返回一个promise，该promise的reosolve值就是函数return的值。整体上async/await更像是同步写法了。</p>\n<h2 id=\"async/await优点\">async/await优点<a title=\"#async/await优点\" href=\"#async/await优点\"></a></h2>\n<ul>\n<li>\n<p>首选毋庸置疑的是async/await代码更加简洁了，不需要很多.then写匿名回调</p>\n</li>\n<li>\n<p>错误处理：async/await是利用try/catch处理错误，可以同时处理同步和异步的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        getJSON().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">            data = <span class=\"built_in\">JSON</span>.parse(data); <span class=\"comment\">// JSON.parse可能会出错</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"comment\">// 处理异步代码的错误</span></span><br><span class=\"line\">        .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(abc); <span class=\"comment\">//同步错误：未声明变量</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err) <span class=\"comment\">//无法处理.then内部的错误，只能处理同步错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//async/await</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = <span class=\"built_in\">JSON</span>.parse(<span class=\"keyword\">await</span> getJSON()) <span class=\"comment\">// JSON.parse可能会出错</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(abc); <span class=\"comment\">//同步错误：未声明变量</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err)  <span class=\"comment\">//能同时处理try内部和getJSON的异步错误</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>中间值：有时候下一个异步函数需要上一个异步返回值，promise就可能陷入嵌套回调，使用async/await会更加简洁：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> makeRequest = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value1 = <span class=\"keyword\">await</span> promise1()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> value2 = <span class=\"keyword\">await</span> promise2(value1)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [value1, value2]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>调试：当在promise.then中设置断点，step over不会进入下一个.then，会直接跳过本次异步代码。而async/await，完全可以把它当成同步代码。</p>\n</li>\n</ul>\n<p><strong>小提一下缺点</strong>：经过编译后的代码比较臃肿，async/await是ES2017的内容，可能有些浏览器不支持，就需要用babel进行编译，问题是本来只写了几行的代码，编译后就是几倍的代码量。</p>\n","prev":{"title":"SVN","link":"/1590390707"},"next":{"title":"JSHint的使用和配置","link":"/1588748967"},"plink":"https://www.zzboy.cn//1589841597/","toc":[{"id":"日常啰嗦","title":"日常啰嗦","index":"1"},{"id":"async/await的使用方法","title":"async&#x2F;await的使用方法","index":"2"},{"id":"async/await优点","title":"async&#x2F;await优点","index":"3"}],"reward":true,"copyright":{"author":"Patrick Jun","link":"<a href=\"https://www.zzboy.cn//1589841597/\" title=\"爱了爱了async/await\">https://www.zzboy.cn//1589841597/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"May 19, 2020"}}