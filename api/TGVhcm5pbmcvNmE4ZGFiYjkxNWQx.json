{"title":"机器学习-Python基础","date":"2020-07-09T10:11:49.000Z","date_formatted":{"ll":"Jul 9, 2020","L":"07/09/2020","MM-DD":"07-09"},"link":"Learning/6a8dabb915d1","comments":true,"tags":["Python","机器学习"],"categories":["Learning"],"updated":"2021-02-27T13:50:52.011Z","content":"<p>此篇文章是我在学完一章节后再回顾之前的课程进行的总结笔记</p>\n<!-- more --->\n<h2 id=\"一、环境及基础语法\">一、环境及基础语法<a title=\"#一、环境及基础语法\" href=\"#一、环境及基础语法\"></a></h2>\n<h3 id=\"1.1-环境准备\">1.1 环境准备<a title=\"#1.1-环境准备\" href=\"#1.1-环境准备\"></a></h3>\n<ul>\n<li>Anaconda\n<ul>\n<li><a href=\"https://www.continuum.io/downloads\">https://www.continuum.io/downloads</a></li>\n<li>包含大量专门针对数据科学的库和软件分发版本\n<ul>\n<li>Numpy、Pandas、Matplotlib…</li>\n</ul>\n</li>\n<li>可设置不同环境，在不同的Python版本中切换</li>\n<li>自带数据工作者常用的spyder以及jupyter等工具</li>\n</ul>\n</li>\n<li>其他\n<ul>\n<li>Python下载页：<a href=\"https://www.python.org/downloads/\">https://www.python.org/downloads/</a></li>\n<li>IDE：pycharm <a href=\"https://www.jetbrains.com/pycharm/\">https://www.jetbrains.com/pycharm/</a></li>\n<li>Editor: Atom <a href=\"https://atom.io/\">https://atom.io/</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"安装anaconda\">安装Anaconda<a title=\"#安装anaconda\" href=\"#安装anaconda\"></a></h4>\n<p>Anaconda 可用于 Windows、Mac OS X 和 Linux。安装程序链接： <a href=\"https://www.anaconda.com/download/\">https://www.anaconda.com/download/</a> 。</p>\n<p>如果计算机上已经安装了 Python，这不会有任何影响。Anaconda使用自己附带的Python。</p>\n<p>选择 Python 3.6 版本（你也可以根据具体的需要选择 Python 2 的版本）。如果是 64 位操作系统，则选择 64 位安装程序，否则选择 32 位安装程序。</p>\n<p>完成安装后，打开Anaconda Prompt，可以进入Anaconda命令行模式。在其中执行 conda list，可以看到随Anaconda安装的包及其版本。</p>\n<p>安装完成之后的主要应用程序：</p>\n<p>Anaconda Navigator：用于管理环境和包的 GUI</p>\n<p>Anaconda Prompt 终端：管理环境和包的命令行工具</p>\n<p>Spyder：面向科学开发的 IDE</p>\n<p>在安装完成之后，可以通过如下命令对包进行更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda upgrade --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"管理包\">管理包<a title=\"#管理包\" href=\"#管理包\"></a></h4>\n<p>Anaconda安装完成之后，可以通过命令conda install安装所需要的包。比如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy</span><br></pre></td></tr></table></figure>\n<p>当需要安装多个包时，可以执行类似这样的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy pandas</span><br></pre></td></tr></table></figure>\n<p>Python的不同包之间可能存在依赖关系，通过conda安装过程中，它会为我们解决所有依赖问题，将要安装的包所依赖的其它包也一并进行下载和安装。</p>\n<p>如果需要指定安装某个特定版本的包，可以执行类似如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install numpy=1.10</span><br></pre></td></tr></table></figure>\n<p>可以使用命令conda remove &lt;package_name&gt;方式删除指定的包。</p>\n<h4 id=\"anaconda虚拟环境\">Anaconda虚拟环境<a title=\"#anaconda虚拟环境\" href=\"#anaconda虚拟环境\"></a></h4>\n<p>Anaconda可以通过虚拟环境来隔离不同项目对于包版本的不同需求。可以通过命令conda create -n env_name packages 来创建虚拟环境。比如如下命令创建了一个名为env1的虚拟环境，并在其中安装numpy：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n env1 numpy</span><br></pre></td></tr></table></figure>\n<p>创建环境时，可以指定环境中使用特定版本的Python，比如，如下命令创建了一个使用Python2的名为py2的虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n py2 python=2</span><br></pre></td></tr></table></figure>\n<h4 id=\"列出和进入环境\">列出和进入环境<a title=\"#列出和进入环境\" href=\"#列出和进入环境\"></a></h4>\n<p>可用通过conda env list 命令列出当前机器上已经创建的虚拟环境：</p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/05-15/174219bc17db431134.png\" alt=\"img\" class=\"φbs\"></p>\n<p>在MacOS/Linux上，执行source activate env_name命令，即可进入名为env_name的虚拟环境中。在Windows上，需要执行的命令是activate env_name。当需要离开虚拟环境时，MacOS/Linux中执行source deactivate，在Windows上，执行deactivate。</p>\n<p>当我们在虚拟环境当中，同样也可以使用conda install命令来安装虚拟环境中所需要的软件包。</p>\n<h4 id=\"删除环境\">删除环境<a title=\"#删除环境\" href=\"#删除环境\"></a></h4>\n<p>使用以下命令，删除名为env_name的虚拟环境：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env remove -n env_name</span><br></pre></td></tr></table></figure>\n<h4 id=\"jupyter-notebook\">Jupyter notebook<a title=\"#jupyter-notebook\" href=\"#jupyter-notebook\"></a></h4>\n<p>Jupyter notebook 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。</p>\n<p>Jupyter notebook 已迅速成为数据分析、机器学习等领域的工作人员在进行数据清理和探索时所需的必备工具。notebook 能将文档及代码等一切相关资料集中到一处，让用户一目了然。</p>\n<p>Jupyter notebook 源自 IPython，是一种交互式 shell，与普通的 Python shell 相似。最初，notebook 的工作方式是，将来自 Web 应用（你在浏览器中看到的 notebook）的消息发送给 IPython 内核（在后台运行的 IPython 应用程序）。内核执行代码，然后将结果发送回 notebook。IPython经过技术演进之后，将内核分离，成为现在的架构模式：</p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/05-23/17240990c4ec007646.png\" alt=\"img\" class=\"φbs\"></p>\n<p>架构的核心是 notebook server。用户通过浏览器连接到该服务器。用户在 Web 应用中编写的代码通过浏览器发送给notebook server之后，notebook server将代码发送给内核，内核运行并将结果发送回notebook server。最后，输出返回给浏览器并展示给用户。</p>\n<p>保存 notebook 时，所有内容将生成一个 JSON 文件（文件扩展名为 .ipynb）写入到notebook server中。</p>\n<p>在 conda 环境中，执行如下命令即可安装jupyter notebook：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda install jupyter notebook</span><br></pre></td></tr></table></figure>\n<p>在Anaconda字符终端输入jupyter notebook，即可启动notebook server。服务器会在此命令被执行的目录中启动，任何 notebook 文件都会保存在该目录下。</p>\n<p>运行此命令时（请自己试一下！），服务器主页会在浏览器中打开。默认情况下，notebook server的访问地址是http://localhost:8888，通过当前机器上所带的浏览器访问该地址就可以看到Server的主页面。</p>\n<p>如果同时启动了另一个 notebook server，新服务器会尝试使用端口8888，但由于此端口已被占用，新Server会在端口8889上运行。这样，可以通过http://localhost:8889连接到新服务器。</p>\n<p>Jupyter主页面类似以下所示：</p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/05-23/181151716d59008284.png\" alt=\"img\" class=\"φbs\"></p>\n<p>在右侧，可以点击“New”，创建新的 notebook、文本文件、文件夹或终端。“Notebooks”下的列表显示了已安装的内核，这里可能是Python2/3或者是其他如Scala这样的语言。</p>\n<p>顶部的选项卡是 <em>Files</em>、<em>Running</em>和 <em>Cluster</em>。<em>Files</em>显示当前目录中的所有文件和文件夹。点击 <em>Running</em>选项卡会列出所有正在运行的 notebook。可以在该选项卡中管理这些 notebook。</p>\n<p><em>Clusters</em>选项卡用处不多，我们可以先不理会。</p>\n<p>通过在服务器主页上选中 notebook 旁边的复选框，然后点击“Shutdown”，就可以关闭各个 notebook。</p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/05-23/18243972919b879289.png\" alt=\"img\" class=\"φbs\"></p>\n<p>通过在终端中按 Ctrl + C（Mac及Linux上是按两次Ctrl + C），可以关闭整个服务器。这会立即关闭所有运行中的 notebook，所有未保存的内容会丢失。</p>\n<h3 id=\"1.2-基础语法\">1.2 基础语法<a title=\"#1.2-基础语法\" href=\"#1.2-基础语法\"></a></h3>\n<h4 id=\"缩进\">缩进<a title=\"#缩进\" href=\"#缩进\"></a></h4>\n<p><strong>规则</strong></p>\n<ol>\n<li>Python使用缩进来标识代码块。</li>\n<li>缩进空格数可变，同一代码块的语句必须包含相同缩进。</li>\n<li>使用反斜杠连接多行。</li>\n</ol>\n<p><strong>习惯</strong></p>\n<ol>\n<li>在功能相差较大的代码块之间通常用空行分割。</li>\n<li>并不影响代码执行。</li>\n</ol>\n<h4 id=\"注释\">注释<a title=\"#注释\" href=\"#注释\"></a></h4>\n<p><strong>单行注释</strong><br>\n以#开头，只注释#开头的一行。</p>\n<p><strong>多行注释</strong><br>\n‘’’ 注释内容’‘’ 或者&quot;““注释内容””&quot;，可以对多行内容整体进行注释。</p>\n<h4 id=\"变量\">变量<a title=\"#变量\" href=\"#变量\"></a></h4>\n<p><strong>变量的定义</strong><br>\n在Python中，变量指向各种类型值的名字，当用到这个类型的值时，直接使用变量即可，不需要再写具体的值。<br>\n<strong>格式</strong>：变量名 = 数值<br>\nage = 23<br>\nmoney = 13<br>\nsum = age + money<br>\ngreed = “Hello”<br>\nprint(greed)</p>\n<p>变量的类型不需要显示指定，python解释器会自动判断数据类型，可以 把任意数据类型赋值给变量。<br>\n变量名称命名简洁明了，见名知意<br>\n使用type(变量)查看变量类型</p>\n<p><strong>标识符</strong></p>\n<p>在Python程序开发过程中，自定义的一些符号、名称</p>\n<ul>\n<li>由字母、数字、下划线（_）组成，不能以数字开头</li>\n<li>标识符区分大小写</li>\n</ul>\n<p><strong>命名规则</strong></p>\n<ul>\n<li>\n<p>见名知意，如：name</p>\n</li>\n<li>\n<p>驼峰命名法，如：类名（UserInfo）、异常名（ValueError）等</p>\n</li>\n<li>\n<p>小写字符+下划线，如：变量名（user_name）、函数名(get_name)</p>\n</li>\n<li>\n<p>不能够使用关键字</p>\n</li>\n</ul>\n<p><strong>关键字</strong></p>\n<ul>\n<li>在Python内部具有特殊功能的标识符</li>\n<li>通过keyword模块的kwlist函数查看</li>\n</ul>\n<h4 id=\"运算符\">运算符<a title=\"#运算符\" href=\"#运算符\"></a></h4>\n<p><strong>主要运算符</strong></p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/07-16/15372664e09e655275.png\" alt=\"img\" class=\"φbs\"></p>\n<p><strong>运算符的优先级</strong></p>\n<p><img src=\"https://www.chinahadoop.cn/files/course/2018/07-16/153809107f1c567575.png\" alt=\"img\" class=\"φbs\"></p>\n<h4 id=\"输入输出\">输入输出<a title=\"#输入输出\" href=\"#输入输出\"></a></h4>\n<p><strong>输入</strong></p>\n<ul>\n<li>读取键盘输入</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = input(&quot;请输入：&quot;) </span><br><span class=\"line\">print (&quot;你输入的内容是: &quot;, str) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>文件输入</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(&quot;/tmp/foo.txt&quot;, &quot;r&quot;) </span><br><span class=\"line\">str = f.read()  #或按行读取str = f.readline() </span><br><span class=\"line\">print(str) </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭打开的文件</span> </span><br><span class=\"line\">f.close() </span><br></pre></td></tr></table></figure>\n<ul>\n<li>with操作<br>\n在代码块中包含对于文件的操作，而省掉显示调用close等资源处理的收尾工作。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">with open(&quot;/tmp/filename&quot;, &quot;r&quot;) as f:</span><br><span class=\"line\">\tstr = f.read()</span><br><span class=\"line\">    print(str)</span><br><span class=\"line\">    # 关闭打开的文件</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n<p><strong>输出</strong></p>\n<ul>\n<li>格式化输出</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math </span><br><span class=\"line\">print(&#x27;常量 PI 的值近似为：%5.3f。&#x27; % math.pi) </span><br><span class=\"line\">print(&#x27;it is %5.3f %5.4f&#x27; %(math.pi,math.pi)) </span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>常用格式化符号<br>\n示例：print(“你输入的名字是：%s”%name)<br>\n<img src=\"https://www.chinahadoop.cn/files/course/2018/07-16/1741288c00c1849256.png\" alt=\"img\"></p>\n</li>\n<li>\n<p>写文件</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 打开一个文件</span> </span><br><span class=\"line\">f = open(&quot;/tmp/foo.txt&quot;, &quot;w&quot;) </span><br><span class=\"line\"></span><br><span class=\"line\">num = f.write( &quot;这是我写的第一行。\\n第二行内容\\n&quot; ) </span><br><span class=\"line\">print(num) </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 关闭打开的文件</span> </span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、控制流\">二、控制流<a title=\"#二、控制流\" href=\"#二、控制流\"></a></h2>\n<h2 id=\"三、基本数据类型和数据结构\">三、基本数据类型和数据结构<a title=\"#三、基本数据类型和数据结构\" href=\"#三、基本数据类型和数据结构\"></a></h2>\n<p><strong>Python数据类型</strong><br>\n<img src=\"https://www.chinahadoop.cn/files/course/2018/07-16/1719197d2d9d710306.png\" alt=\"img\"><br>\n<strong>类型转换</strong><br>\nPython数据可以通过 类型名(变量名) 的方式进行变量类型的转换操作，主要的转换操作包括：<br>\n<img src=\"https://www.chinahadoop.cn/files/course/2018/07-16/171957d725cc654819.png\" alt=\"img\"></p>\n<h3 id=\"3.1-字符串\">3.1 字符串<a title=\"#3.1-字符串\" href=\"#3.1-字符串\"></a></h3>\n<ul>\n<li>字符串变量定义</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = &quot;hello&quot; 或者&#x27;hello&#x27;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组合字符串的方式<br>\n“+”号 格式化符号</li>\n<li>通过下标获取指定位置字符</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string_name[index]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>切片</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string_name[起始:结束:步长]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>字符串方法文档<br>\n<a href=\"https://docs.python.org/3/library/stdtypes.html#string-methods\" target=\"_blank\">https://docs.python.org/3/library/stdtypes.html#string-methods</a></li>\n</ul>\n<h3 id=\"3.2-列表-[]\">3.2 列表 []<a title=\"#3.2-列表-[]\" href=\"#3.2-列表-[]\"></a></h3>\n<p><strong>列表定义</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_list &#x3D; [&quot;zhangsan&quot;,&quot;lisi&quot;,&quot;wangwu&quot;]</span><br></pre></td></tr></table></figure>\n<p>顺序存储，可通过下标获取内部元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_list[0]</span><br><span class=\"line\">name_list[1] </span><br></pre></td></tr></table></figure>\n<p>内容可变，可通过下标修改元素值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name_list[0] &#x3D; &quot;xiaobai&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>for方式遍历</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for item in name_list:</span><br><span class=\"line\">\tprint(item)</span><br></pre></td></tr></table></figure>\n<p><strong>列表修改</strong></p>\n<ul>\n<li>\n<p>添加元素<br>\nappend()/insert()</p>\n</li>\n<li>\n<ul>\n<li></li>\n</ul>\n<p>组合两个列表生成新的列表</p>\n</li>\n<li>\n<p>extend​<br>\n向调用它的列表中添加另外一个列表的元素</p>\n</li>\n<li>\n<p>删除元素<br>\ndel()/pop()/remove()</p>\n</li>\n<li>\n<p>apend、+、extend的区别</p>\n<ol>\n<li>\n<p>append：在列表的末尾添加元素，如果使用append添加一个列表，则会把列表整体作为一个元素添加到列表末尾。</p>\n</li>\n<li>\n<p>extend：向调用它的列表中追加另外一个列表中的元素，调用的列表内容会发生变化。</p>\n</li>\n<li>\n<p>+：将两个列表中的元素组合，生成一个新的列表，原来的两个列表内容不变。</p>\n</li>\n</ol>\n</li>\n</ul>\n<p><strong>切片和排序</strong></p>\n<ul>\n<li>切片<br>\n格式：<code>[start:end:step]</code><br>\n结果中包含start而不包含end</li>\n<li>使用<code>in/not in</code>判断元素在列表中是否存在</li>\n<li>列表内元素重排序<br>\nsort()</li>\n<li>列表内容倒置<br>\nreverse()</li>\n<li>统计列表内指定元素个数<br>\ncount()</li>\n</ul>\n<h3 id=\"3.3-元组-()\">3.3 元组 ()<a title=\"#3.3-元组-()\" href=\"#3.3-元组-()\"></a></h3>\n<h3 id=\"3.4-集合-set()-{,}\">3.4 集合 set() {,}<a title=\"#3.4-集合-set()-{,}\" href=\"#3.4-集合-set()-{,}\"></a></h3>\n<h3 id=\"3.5-字典-{}\">3.5 字典 {}<a title=\"#3.5-字典-{}\" href=\"#3.5-字典-{}\"></a></h3>\n<h3 id=\"3.6-函数\">3.6 函数<a title=\"#3.6-函数\" href=\"#3.6-函数\"></a></h3>\n<h2 id=\"四、python高级知识\">四、Python高级知识<a title=\"#四、python高级知识\" href=\"#四、python高级知识\"></a></h2>\n<h2 id=\"五、数据可视化\">五、数据可视化<a title=\"#五、数据可视化\" href=\"#五、数据可视化\"></a></h2>\n<h2 id=\"六、一些常用函数\">六、一些常用函数<a title=\"#六、一些常用函数\" href=\"#六、一些常用函数\"></a></h2>\n","prev":{"title":"机器学习-数学知识","link":"Learning/1cff8a542631"},"next":{"title":"毕业设计-“跑鸭”微信小程序","link":"Learning/3029bde5b8fc"},"plink":"https://www.zzboy.cn/Learning/6a8dabb915d1/","toc":[{"id":"一、环境及基础语法","title":"一、环境及基础语法","index":"1","children":[{"id":"1.1-环境准备","title":"1.1 环境准备","index":"1.1"},{"id":"1.2-基础语法","title":"1.2 基础语法","index":"1.2"}]},{"id":"二、控制流","title":"二、控制流","index":"2"},{"id":"三、基本数据类型和数据结构","title":"三、基本数据类型和数据结构","index":"3","children":[{"id":"3.1-字符串","title":"3.1 字符串","index":"3.1"},{"id":"3.2-列表-[]","title":"3.2 列表 []","index":"3.2"},{"id":"3.3-元组-()","title":"3.3 元组 ()","index":"3.3"},{"id":"3.4-集合-set()-{,}","title":"3.4 集合 set() {,}","index":"3.4"},{"id":"3.5-字典-{}","title":"3.5 字典 {}","index":"3.5"},{"id":"3.6-函数","title":"3.6 函数","index":"3.6"}]},{"id":"四、python高级知识","title":"四、Python高级知识","index":"4"},{"id":"五、数据可视化","title":"五、数据可视化","index":"5"},{"id":"六、一些常用函数","title":"六、一些常用函数","index":"6"}],"reward":true,"copyright":{"author":"Patrick Jun","link":"<a href=\"https://www.zzboy.cn/Learning/6a8dabb915d1/\" title=\"机器学习-Python基础\">https://www.zzboy.cn/Learning/6a8dabb915d1/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"July 9, 2020"}}