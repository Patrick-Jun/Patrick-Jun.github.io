{"title":"机器学习-数据分析","date":"2020-07-23T08:51:07.000Z","date_formatted":{"ll":"Jul 23, 2020","L":"07/23/2020","MM-DD":"07-23"},"link":"Learning/9868fdc85e89","tags":["机器学习"],"categories":["Learning"],"updated":"2021-02-27T13:50:58.759Z","content":"<p>数据分析章节笔记</p>\n<span id=\"more\"></span>\n<h2 id=\"一、数据分析过程\">一、数据分析过程<a title=\"#一、数据分析过程\" href=\"#一、数据分析过程\"></a></h2>\n<ol>\n<li>提出问题</li>\n</ol>\n<p>提出的问题与数据保持较高的相关性，让问题更加有趣，并且可以引导出有价值的结论。</p>\n<ol start=\"2\">\n<li>数据处理</li>\n</ol>\n<p>数据搜集、数据评估、数据清洗（异常值、缺失值、重复值等）</p>\n<blockquote>\n<p>收集数据：UCI, Kaggle, KDDcup, mldata, 银监会, 证监会, 统计局等</p>\n</blockquote>\n<ol start=\"3\">\n<li>探索数据</li>\n</ol>\n<p>数据可视化等。</p>\n<ol start=\"4\">\n<li>得出结论</li>\n</ol>\n<p>算法建模、推断统计、数据预测。</p>\n<ol start=\"5\">\n<li>结果报告</li>\n</ol>\n<p>传达结果的方法有多种：报告、幻灯片、博客帖子、电子邮件、演示文稿等。</p>\n<p>数据分析函数库</p>\n<p>Numpy：是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算。此外也针对数组运算提供大量的数学函数库。运算效率高，是大量机器学习框架的基础库。</p>\n<p>Pandas：Python的一个数据分析包。Pandas纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具以及能使我们快速便捷地处理数据的函数和方法。</p>\n<p>Matplotlib：Python的2D绘图库，以各种硬拷贝格式和跨平台的交互式环境生成出版质量级别的图形。通过Matplotlib，开发者可以仅需要几行代码，便可以生成绘图、直方图、功率谱、条形图、错误图、散点图等。</p>\n<h2 id=\"二、numpy及pandas基础\">二、Numpy及Pandas基础<a title=\"#二、numpy及pandas基础\" href=\"#二、numpy及pandas基础\"></a></h2>\n<p>为什么要使用Numpy和Pandas?</p>\n<p>Numpy（Numerical Python）<br>\n2. 高性能科学计算和数据分析的基础包（由C语言实现）<br>\n3. 提供多维数组对象，具有矢量运算能力</p>\n<p>Pandas</p>\n<ol>\n<li>基于Numpy，提供高性能的矩阵运算</li>\n<li>具有更多方便矩阵计算中使用的方法</li>\n</ol>\n<p>在jupyter中，可以在每段代码前加一句，可以统计该段代码的执行时间：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%%timeit</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.1-numpy一维数组\">2.1 Numpy一维数组<a title=\"#2.1-numpy一维数组\" href=\"#2.1-numpy一维数组\"></a></h3>\n<p><strong>一维数组</strong><br>\nPandas：Series<br>\nNumpy：ndarray</p>\n<p><strong>ndarray与Python List的相似处</strong></p>\n<p>通过位置访问元素</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l[<span class=\"number\">0</span>]、l[<span class=\"number\">2</span>:<span class=\"number\">5</span>]、l[:<span class=\"number\">3</span>]、l[<span class=\"number\">2</span>:]</span><br></pre></td></tr></table></figure>\n<p>循环</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> l:</span><br><span class=\"line\">      xxx</span><br></pre></td></tr></table></figure>\n<p><strong>ndarray与Python List的不同</strong></p>\n<ol>\n<li>Python List元素可以任意类型组合、ndarray元素类型必须相同（不相同时Numpy会自动做类型转换）</li>\n<li>ndarray有mean()、std()等更多的跟数学计算相关的内置函数</li>\n<li>ndarray可以更方便的对多维度数组进行运算</li>\n</ol>\n<h3 id=\"2.2-向量与标量计算\">2.2 向量与标量计算<a title=\"#2.2-向量与标量计算\" href=\"#2.2-向量与标量计算\"></a></h3>\n<p>向量：用一个ndarray表示向量</p>\n<p>计算规则：标量会“扩散”到向量中，与向量的每个元素进行计算。</p>\n<h3 id=\"2.3-向量运算\">2.3 向量运算<a title=\"#2.3-向量运算\" href=\"#2.3-向量运算\"></a></h3>\n<p>对应位置上的元素进行相应操作</p>\n<p>支持运算：</p>\n<ol>\n<li>\n<p><code>+</code>,<code> -</code>,<code> *</code>, <code>/</code>, <code>**</code>(求幂)</p>\n</li>\n<li>\n<p><code>&amp;</code>, <code>|</code> , <code>~</code>：</p>\n<p>当boolean时，直接与或非；</p>\n<p>当为整数时，是按位做与或非操作（<code>~3 = ~000...11 = 111...00</code>）；</p>\n</li>\n<li>\n<p><code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>!=</code>, <code>==</code>：操作后形成的向量，有boolean组成</p>\n</li>\n</ol>\n<h3 id=\"2.4-numpy索引数组\">2.4 Numpy索引数组<a title=\"#2.4-numpy索引数组\" href=\"#2.4-numpy索引数组\"></a></h3>\n<p>定义</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">b = np.array([<span class=\"literal\">True</span>, <span class=\"literal\">True</span>, <span class=\"literal\">False</span>])</span><br><span class=\"line\">a[b]</span><br></pre></td></tr></table></figure>\n<p>结果是[1, 2]，b即为索引数组。</p>\n<h3 id=\"2.5-ndarray-+=-操作\">2.5 ndarray += 操作<a title=\"#2.5-ndarray-+=-操作\" href=\"#2.5-ndarray-+=-操作\"></a></h3>\n<p><strong>+=</strong> 原地操作<br>\n<strong>+</strong> 非原地操作</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">b = a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># += 原地操作  b = [2, 3, 4]   ab同时指向原地址</span></span><br><span class=\"line\">a += np.array([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">print(b) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># + 非原地操作 b = [1, 2, 3]   a产生新的地址</span></span><br><span class=\"line\">a = a + np.array([<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\">print(b)    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>切片操作时</p>\n<ol>\n<li>\n<p>对于Numpy array切片的修改，是原地操作，会影响原有array。</p>\n</li>\n<li>\n<p>对于Python List切片的修改，是非原地操作，不会影响原有List。</p>\n</li>\n</ol>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = np.array([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">b = a[:<span class=\"number\">2</span>]</span><br><span class=\"line\">b[<span class=\"number\">0</span>] = -<span class=\"number\">10</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\"># [-10, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.6-numpy中的随机数\">2.6 Numpy中的随机数<a title=\"#2.6-numpy中的随机数\" href=\"#2.6-numpy中的随机数\"></a></h3>\n<p>文档<br>\n<a href=\"https://docs.scipy.org/doc/numpy/reference/routines.random.html%E2%80%8B\">https://docs.scipy.org/doc/numpy/reference/routines.random.html​</a></p>\n<p><strong>random.rand()</strong><br>\n根据给定维度生成[0,1)之间的数据</p>\n<p><strong>random.randn()</strong><br>\n根据给定维度（不给维度时为单个数），产生符合标准正态分布的随机数</p>\n<p><strong>random.normal()</strong><br>\n产生可定义均值和标准差的正态分布随机数</p>\n<p><strong>random.randint()</strong><br>\n返回给定维度的随机整数</p>\n<p><strong>random.random()</strong>、<strong>random.random_sample()</strong><br>\n返回给定维度的[0, 1)之间的随机数</p>\n<p><strong>random.choice()</strong><br>\n从给定的一维数组中生成随机数</p>\n<p><strong>random.seed()</strong><br>\n当设置相同的seed，每次生成的随机数相同。如果不设置seed，则每次会生成不同的随机数</p>\n<h3 id=\"2.7-pandas-series\">2.7 Pandas Series<a title=\"#2.7-pandas-series\" href=\"#2.7-pandas-series\"></a></h3>\n<p>Pandas Series相对于Numpy ndarray</p>\n<ol>\n<li>\n<p>更多的函数<br>\ndescribe()…</p>\n</li>\n<li>\n<p>相似<br>\n下标方式访问：s[10]、s[3:10]…<br>\nfor循环：for item in s<br>\n向量计算：+、-、*、/、…<br>\n科学函数：mean、sum、max …<br>\n比Python List快</p>\n</li>\n</ol>\n<h3 id=\"2.8-series索引\">2.8 Series索引<a title=\"#2.8-series索引\" href=\"#2.8-series索引\"></a></h3>\n<p><code>iloc</code> 通过位置访问Series元素</p>\n<p><code>loc</code> 通过索引访问Series元素</p>\n<p><code>idxmax</code> 获取Series中最大元素的索引</p>\n<h3 id=\"2.9-series向量计算\">2.9 Series向量计算<a title=\"#2.9-series向量计算\" href=\"#2.9-series向量计算\"></a></h3>\n<p>计算操作按照索引进行对应计算，如果两方都没有共同索引，计算结果时NaN</p>\n<h3 id=\"2.10-series-apply\">2.10 Series apply<a title=\"#2.10-series-apply\" href=\"#2.10-series-apply\"></a></h3>\n<p>a.apply(fn)；传入指定函数，series会将每一元素传入函数fn并返回，如果没有返回则结果是NaN</p>\n<h3 id=\"2.11-缺失值填充\">2.11 缺失值填充<a title=\"#2.11-缺失值填充\" href=\"#2.11-缺失值填充\"></a></h3>\n<p>dropna<br>\n将NaN元素去除。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(s1+s2).dropna(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>fillna<br>\n将NaN元素替换</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(s1+s2).fillna(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>add以及fill_value<br>\n使用自定义填充值填充最终结果。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s1.add(s2, fill_value=<span class=\"number\">0</span>)  <span class=\"comment\">#s2中不存在的索引用0替代</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.12-pandas绘图\">2.12 Pandas绘图<a title=\"#2.12-pandas绘图\" href=\"#2.12-pandas绘图\"></a></h3>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">s = pd.Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>], index=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>], name=<span class=\"string\">&#x27;test&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># s = pd.Series(np.random.randn(20), name=&#x27;np&#x27;)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot(kind=<span class=\"string\">&#x27;line&#x27;</span>)  <span class=\"comment\">#折线图</span></span><br><span class=\"line\">s.plot(kind=<span class=\"string\">&#x27;bar&#x27;</span>)   <span class=\"comment\">#柱形图</span></span><br></pre></td></tr></table></figure>\n<p>柱形图：bar</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.bar()</span><br></pre></td></tr></table></figure>\n<p>直方图：hist</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.hist()</span><br></pre></td></tr></table></figure>\n<p>箱线图：box</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.box()</span><br></pre></td></tr></table></figure>\n<p>密度图：kde</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.kde()</span><br></pre></td></tr></table></figure>\n<p>区域图：area</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.area()</span><br></pre></td></tr></table></figure>\n<p>饼图：pie</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.plot.pie(figsize=(<span class=\"number\">6</span>,<span class=\"number\">6</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"2.13-numpy二维数组\">2.13 Numpy二维数组<a title=\"#2.13-numpy二维数组\" href=\"#2.13-numpy二维数组\"></a></h3>\n<p><strong>二维数组的表示方法</strong><br>\nPython原生：列表的列表<br>\nNumpy：ndarray<br>\nPandas：DataFrame</p>\n<p>二维ndarray与Python List</p>\n<ol>\n<li>ndarray性能更好</li>\n<li>ndarray有mean()、std()、sum()等更多的跟数学计算相关的内置函数，作用于整个数组</li>\n<li>访问语法差别：a[1,2]（Numpy ndarray）、a[1][2]（Python List）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[0,:] #第0行全部</span><br><span class=\"line\">a[0, 0:2] #第0行0,1列</span><br></pre></td></tr></table></figure>\n<p><strong>Numpy轴</strong></p>\n<p>axis<br>\n0：按列计算<br>\n1：按行计算</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.mean(axis=<span class=\"number\">1</span>)  <span class=\"comment\">#计算每一行的平均数</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2.14-pandas二维数组-dataframe\">2.14 Pandas二维数组 DataFrame<a title=\"#2.14-pandas二维数组-dataframe\" href=\"#2.14-pandas二维数组-dataframe\"></a></h3>\n<p>ndarray当加入行列标识时，会导致数据无法计算。</p>\n<p><strong>创建方法</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df_1 = pd.DataFrame(&#123;<span class=\"string\">&#x27;A&#x27;</span>: [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"string\">&#x27;B&#x27;</span>: [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]&#125;)</span><br><span class=\"line\">df_2 = pd.DataFrame([[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]], \t\t\t\t</span><br><span class=\"line\">                     columns=[<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>], index=[<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure>\n<p><strong>函数</strong><br>\nmean([axis])、sum、max、min …</p>\n<p>std(ddof=0)<br>\nDataFrame的std方法中，ddof默认值为1，计算的是考虑了贝塞尔校正之后的标准差。</p>\n<p><strong>取某行</strong><br>\nloc[index]：根据设置的索引、iloc[]：根据序号</p>\n<p><strong>取某列</strong><br>\n[xxx]</p>\n<p>取行和列的结果就是一个series类型</p>\n<p><strong>转换成Numpy array</strong><br>\nvalues</p>\n<h3 id=\"2.15-csv到dataframe\">2.15 CSV到DataFrame<a title=\"#2.15-csv到dataframe\" href=\"#2.15-csv到dataframe\"></a></h3>\n<p>df = pd.read_csv(‘path’)<br>\n将csv文件加载为DataFrame。</p>\n<p>读取行loc，读取列[]</p>\n<p>df.describe()<br>\n获取DataFrame中数据的描述信息，比如均值、最大最小值等。</p>\n<h3 id=\"2.16-pandas的轴\">2.16 Pandas的轴<a title=\"#2.16-pandas的轴\" href=\"#2.16-pandas的轴\"></a></h3>\n<p>在使用DataFrame的计算方法时，可以传入参数按轴计算</p>\n<p>按列计算<br>\naxis=0 或 ‘index’</p>\n<p>按行计算<br>\naxis=1 或 ‘columns’</p>\n<p>df.mean(axis = 1)</p>\n<h3 id=\"2.17-dataframe向量计算\">2.17 DataFrame向量计算<a title=\"#2.17-dataframe向量计算\" href=\"#2.17-dataframe向量计算\"></a></h3>\n<p>计算操作按照索引进行对应计算，如果两方都没有共同索引，计算结果时NaN</p>\n<p>默认按照相同key对应计算，如果没有指定index索引，数据挨个对应计算，指定了则按照指定index计算</p>\n<p>行整体移动</p>\n<p>df.shift(1)  整体向后移动一位</p>\n<h3 id=\"2.18-dataframe的applymap\">2.18 DataFrame的applymap<a title=\"#2.18-dataframe的applymap\" href=\"#2.18-dataframe的applymap\"></a></h3>\n<p>将DataFrame的每个元素经过函数运算之后转换成新的元素。</p>\n<p>使用方法<strong>和Series的apply相同</strong></p>\n<p>可以直接在applymap写入匿名函数lamda</p>\n<h3 id=\"2.19-dataframe的apply\">2.19 DataFrame的apply<a title=\"#2.19-dataframe的apply\" href=\"#2.19-dataframe的apply\"></a></h3>\n","prev":{"title":"JavaScript新特性","link":"Learning/75dfaa707e38"},"next":{"title":"机器学习-数学知识","link":"Learning/1cff8a542631"},"plink":"https://www.zzboy.cn/Learning/9868fdc85e89/","toc":[{"id":"一、数据分析过程","title":"一、数据分析过程","index":"1"},{"id":"二、numpy及pandas基础","title":"二、Numpy及Pandas基础","index":"2","children":[{"id":"2.1-numpy一维数组","title":"2.1 Numpy一维数组","index":"2.1"},{"id":"2.2-向量与标量计算","title":"2.2 向量与标量计算","index":"2.2"},{"id":"2.3-向量运算","title":"2.3 向量运算","index":"2.3"},{"id":"2.4-numpy索引数组","title":"2.4 Numpy索引数组","index":"2.4"},{"id":"2.5-ndarray-+=-操作","title":"2.5 ndarray +&#x3D; 操作","index":"2.5"},{"id":"2.6-numpy中的随机数","title":"2.6 Numpy中的随机数","index":"2.6"},{"id":"2.7-pandas-series","title":"2.7 Pandas Series","index":"2.7"},{"id":"2.8-series索引","title":"2.8 Series索引","index":"2.8"},{"id":"2.9-series向量计算","title":"2.9 Series向量计算","index":"2.9"},{"id":"2.10-series-apply","title":"2.10 Series apply","index":"2.10"},{"id":"2.11-缺失值填充","title":"2.11 缺失值填充","index":"2.11"},{"id":"2.12-pandas绘图","title":"2.12 Pandas绘图","index":"2.12"},{"id":"2.13-numpy二维数组","title":"2.13 Numpy二维数组","index":"2.13"},{"id":"2.14-pandas二维数组-dataframe","title":"2.14 Pandas二维数组 DataFrame","index":"2.14"},{"id":"2.15-csv到dataframe","title":"2.15 CSV到DataFrame","index":"2.15"},{"id":"2.16-pandas的轴","title":"2.16 Pandas的轴","index":"2.16"},{"id":"2.17-dataframe向量计算","title":"2.17 DataFrame向量计算","index":"2.17"},{"id":"2.18-dataframe的applymap","title":"2.18 DataFrame的applymap","index":"2.18"},{"id":"2.19-dataframe的apply","title":"2.19 DataFrame的apply","index":"2.19"}]}],"reward":true,"copyright":{"author":"Patrick Jun","link":"<a href=\"https://www.zzboy.cn/Learning/9868fdc85e89/\" title=\"机器学习-数据分析\">https://www.zzboy.cn/Learning/9868fdc85e89/</a>","license":"自由转载-非商用-禁止演绎-保持署名 (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"July 23, 2020"}}